NAME: S. Vishwak 
REGISTER NO.:230701385

Ex-9: Implementation Binary Search Tree

#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *left;
    struct node *right;
}*root=NULL;

void insert(int);
void inorder(struct node*);
void preorder(struct node*);
void postorder(struct node*);
void search(struct node *,int);
struct node* inord_suc(struct node*);
void del(struct node *,int);

void insert(int key)
{
    struct node *newnode,*ptr=root,*parent=NULL;
    while(ptr!=NULL){
    if(key>ptr->data){
        parent=ptr;
        ptr=ptr->right;
    }
    else if(key<ptr->data){
        parent=ptr;
        ptr=ptr->left;
    }
    else if(key==ptr->data){
        printf("Data already exists\n");
        return;
    }
    }
    newnode=(struct node *)malloc(sizeof(struct node));
    newnode->data=key;
    newnode->left=NULL;
    newnode->right=NULL;
   
    if(parent==NULL){
        root=newnode;
    }
    else if(key>parent->data){
        parent->right=newnode;
    }
    else if(key<parent->data){
        parent->left=newnode;
    }
}
void inorder(struct node *ptr)
{
    if(ptr != NULL){
        inorder(ptr->left);
        printf("%d ", ptr->data);
        inorder(ptr->right);
    }
}


void preorder(struct node *ptr)
{
    if( ptr!= NULL){
        printf("%d ", ptr->data);
        preorder(ptr->left);
        preorder(ptr->right);
    }
}

void postorder(struct node *ptr)
{
    if(ptr != NULL){
        postorder(ptr->left);
        postorder(ptr->right);
        printf("%d ", ptr->data);
    }
}

void search(struct node *ptr,int key)
{
    int flag=0;
    ptr=root;
    while(ptr!=NULL)
    {
        if(key==ptr->data){
            flag=1;
            break;
        }
        else if(key>ptr->data){
            ptr=ptr->right;
        }
        else if(key<ptr->data){
            ptr=ptr->left;
        }
    }
    if(flag==1)
        printf("\nElement found");
    else
        printf("\nElement not found");
}

struct node* inord_suc(struct node *ptr){
    while(ptr->left!=NULL){
        ptr=ptr->left;
    }
    return ptr;
}

void del(struct node *ptr,int key)
{
    struct node *parent=NULL;
    int flag=0;
    ptr=root;
    while(ptr!=NULL)
    {
        if(key==ptr->data){
            flag=1;
            break;
        }
        else if(key>ptr->data){
            parent=ptr;
            ptr=ptr->right;
        }
        else if(key<ptr->data){
            parent=ptr;
            ptr=ptr->left;
        }
    }
    if(flag==1){
        if(ptr->left==NULL && ptr->right==NULL){
            if(ptr->data>parent->data)
                parent->right=NULL;
            else if(ptr->data<parent->data)
                parent->left=NULL;
            free(ptr);
        }
        else if(ptr->left==NULL || ptr->right==NULL){
            if(key>parent->data){
                if(ptr->left==NULL){
                parent->right=ptr->right;
                }
                else if(ptr->right==NULL){
                    parent->right=ptr->left;
                }
            }
            else if(key<parent->data){
                if(ptr->left==NULL){
                parent->left=ptr->right;
                }
                else if(ptr->right==NULL){
                    parent->left=ptr->left;
                }
            }
        }
        else if(ptr->left!=NULL && ptr->right!=NULL){
            struct node *temp=inord_suc(ptr->right);
            int temp1=temp->data;
            del(temp,temp->data);
            ptr->data=temp1;
        }
    }
}


int main()
{
    struct node *ptr=NULL;
    int data,n,ch;
    printf("\n0.Exit\n1.Insert\n2.Display in Inorder\n3.Display in Preorder\n4.Display in Postorder\n5.Search\n6.Delete");
    while(1){
        printf("\nEnter your choice : ");
        scanf("%d",&ch);
        switch(ch){
            case 1:
                printf("\n\nEnter number of elements to insert : ");
                scanf("%d",&n);
                while(n!=0)
                {
                    printf("\nEnter data : ");
                    scanf("%d",&data);
                    insert(data);
                    n--;
                }
                break;
            case 2:
                printf("\nInorder traversal: \n");
                inorder(root);
                break;
            case 3:
                printf("\nPreorder traversal: \n");
                preorder(root);
                break;
            case 4:
                printf("\nPostorder traversal: \n");
                postorder(root);
                break;
            case 5:
                printf("\nEnter key to find: ");
                scanf("%d",&n);
                search(ptr,n);
                break;
            case 6:
                printf("\nEnter element to delete: ");
                scanf("%d",&n);
                del(ptr,n);
                break;
            default:
                printf("\nExiting program");
                exit(1);
        }
    }
    return 0;
}
